function toggle(id){
            var objID1 = document.getElementById( id + "layerA" );
            var objID2 = document.getElementById( id + "layerB" );
            var buttonID = document.getElementById( id + "button" );
            if(objID1.className=='close') {
              objID1.style.display = 'block';
              objID1.className = 'open';
              objID2.style.display = 'none';
              objID2.className = 'close';
              buttonID.innerHTML = "-";
            }else{
              objID1.style.display = 'none';
              objID1.className = 'close';
              objID2.style.display = 'block';
              objID2.className = 'open';
              buttonID.innerHTML = "+";
}};

//チャート格子作る

var scores = '';

function express_chart(a,b,c,d,e){
   sen_count = a;
   sentence = b;
   sbeam = c;
   cats = d;
   scores = e;
   koushi(a,b);
};

var stage = new createjs.Stage("canvas");
var dot = new createjs.Shape();
dot.graphics.beginFill("black").drawCircle(0,0,3);
stage.addChild(dot);

 
// マウスオーバーを有効にする
stage.enableMouseOver();

var shapeList = [];
var senList = [];
var sent = '';
var senStart = 0;
var senEnd = 0;
var nodesList = [];
//var sbeam = 0;



function koushi(count,sen) {
                 //。を除いた文字数
                 var st = count;
                 //縦の長さ
                 var height = st*250;
                 //横の長さ
                 var width = st*250;
                 //文の先頭指定
                 var a = count - 1;
                 //文の先頭位置を戻す役割
                 var flag = count - 1;
                 //文の最後指定
                 var t = count;
                 var i = 0;
                 //格子作る
                 //nodesList.push(nodes);
                 //context.fillStyle = "#ffffff";
                 for(h = height; h > 0; h-=250){
    	                for (w = width; w > 0; w-=250) {
                            //格子の正方形作る
    	                      var shape = new createjs.Shape();
    	                      //外枠の色
    	                      shape.graphics.beginStroke("darkorange");
                              shape.graphics.beginFill("white");
    	                      shape.graphics.beginFill("white");
    	                      shape.graphics.setStrokeStyle(3);
                            ////正方形のサイズを250*250にする
                              shape.graphics.drawRect(0,0,250,250);
                              shape.x = w;
                              shape.y = h;
                              stage.addChild(shape);
                              shapeList[i] = shape;
                              //テキスト
                              var sen_t = new createjs.Text("", "20px ＭＳ ゴシック", "black");
                              //senを分ける
                              //sen="私は人", a=2, t=3のとき、s=人
                              var s = separate_sen(sen,a,t);
                              sen_t.text = s;
                              sen_t.x = w + 15;
                              sen_t.y = h + 30;
                              //syntactic categoryを表示
                              expressCat(i);
                              //expressScore(i);
                              stage.addChild(sen_t); 
                              shape.addEventListener("click",handleClick);
                              senList.push({sentence:s,start:a,end:t});
                              a--;
                              i++;
                             }
                      //wじゃなくてwidthを減らしていることに注意！
                      width -= 250;
                      //人をもう含めないように、最後の文字を変える
                      t--;
                      //先頭位置をひとつ前に持ってくる
                      flag--;
                      a = flag;
                }
                //描画内容をキャンバスに反映する
                stage.update();
};



function expressCat(i){
      //html_catsをスペースごとで分けてそれぞれを格納したリスト
      var cat = separate_space(cats);
      if (cat[i] == "Node_is_empty!") {
                var sen_cat = new createjs.Text("", "italic 18px Arial", "gray");
      } else {
               var sen_cat = new createjs.Text("", "italic 15px Arial", "black");
      }
      sen_cat.text = cat[i];
      sen_cat.x = w + 10;
      sen_cat.y = h + 80;
      stage.addChild(sen_cat);
};

function expressScore(i){
       var sen_score = new createjs.Text("", "italic 15px Arial", "gray");
       var score = separate_space(scores);
       sen_score.text = "score : " + score[i];
       sen_score.x = w + 15;
       sen_score.y = h + 100;
       stage.addChild(sen_score);
       console.log(sen_score);
};

//文を分ける
//sen : 対象となる文字列
//h : 切り出しの開始位置
//t : 切り出しの終了位置（t のインデックスの前まで）
//var result = separate_sen("こんにちは、世界！", 0, 5);
//console.log(result); // 出力: "こんにちは"
function separate_sen(sen,h,t){
      var result = sen.substring(h,t)
      return result
};


//文字列から(' ')を取り、文字列リストにする
function separate_space(str){
    var ary = cats.split(' ')
    return ary
};

function handleClick(event){
    var shape = event.currentTarget;
    for(var i = 0; i < shapeList.length ; i++){
              if(shapeList[i] == shape){
                   senStart = senList[i].start;
                   senEnd = senList[i].end;
                   console.log(senStart, senEnd, "http://localhost:3000/chart/" + sentence + "/" + sbeam + "/" + senStart + "/" + senEnd);
                   console.log(separate_space(cats));
                   console.log(separate_space(scores));
                   //console.log(senList);
                   let option = 'width=1100,height=600,left=300,top=300';
                   //ここでgetChartR funtionが実行される
                   window.open("http://localhost:3000/chart/" + sentence + "/" + sbeam + "/" + senStart + "/" + senEnd, "mywindow",option);
                 }
     }
};
  
createjs.Ticker.addEventListener("tick", handleTick);
function handleTick(event){
   for(var i = 0; i < shapeList.length; i++){
           var point = shapeList[i].globalToLocal(stage.mouseX, stage.mouseY);
           var isHit = shapeList[i].hitTest(point.x, point.y);
           //ドットにマウス追わせる
            dot.x = stage.mouseX;
            dot.y = stage.mouseY;
            //ドットと図形重なるかどうか判定
             if(isHit == true){
                           shapeList[i].graphics
                                   .clear()
                                   .beginFill("orange")
                                   .beginStroke("darkorange")
    	                           .setStrokeStyle(3)
                                   .drawRect(0,0,250,250);
                           
               }else{        
                            shapeList[i].graphics
                                    .clear()
                                    .beginFill("white")
                                    .beginStroke("darkorange")
    	                            .setStrokeStyle(3)
                                    .drawRect(0,0,250,250);
               }
     }
    stage.update();
};